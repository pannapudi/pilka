#version 460

layout(std430, push_constant) uniform PushConstant {
    vec3 pos;
    float time;
    vec2 resolution;
    vec2 mouse;
    bool mouse_pressed;
    uint frame;
    float time_delta;
    float record_period;
} pc;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba8) uniform image2D previous_frame;
layout (binding = 1, rgba8) uniform image2D generic_texture;
layout (binding = 2, rgba8) uniform image2D dummy_texture;
layout (binding = 3, r32f) uniform image2D float_texture1;
layout (binding = 4, r32f) uniform image2D float_texture2;

#define PI acos(-1.)

// You'd never existed without vim macros :/
const int PATTERN_SIZE = 216;
const vec2 PATTERN[PATTERN_SIZE] = vec2[](
    vec2(-7, -7),vec2(-7, -6),vec2(-7, -5),vec2(-7, -4),vec2(-7, -3),vec2(-7, -2),vec2(-7, -1),
    vec2(-7, 0), vec2(-7, 1), vec2(-7, 2), vec2(-7, 3), vec2(-7, 4), vec2(-7, 5), vec2(-7, 6),
    vec2(-7, 7), vec2(-6, -7),vec2(-6, -6),vec2(-6, -5),vec2(-6, -4),vec2(-6, -3),vec2(-6, -2),
    vec2(-6, -1),vec2(-6, 0), vec2(-6, 1), vec2(-6, 2), vec2(-6, 3), vec2(-6, 4), vec2(-6, 5),
    vec2(-6, 6), vec2(-6, 7), vec2(-5, -7),vec2(-5, -6),vec2(-5, -5),vec2(-5, -4),vec2(-5, -3),
    vec2(-5, -2),vec2(-5, -1),vec2(-5, 0), vec2(-5, 1), vec2(-5, 2), vec2(-5, 3), vec2(-5, 4),
    vec2(-5, 5), vec2(-5, 6), vec2(-5, 7), vec2(-4, -7),vec2(-4, -6),vec2(-4, -5),vec2(-4, -4),
    vec2(-4, -3),vec2(-4, -2),vec2(-4, -1),vec2(-4, 0), vec2(-4, 1), vec2(-4, 2), vec2(-4, 3),
    vec2(-4, 4), vec2(-4, 5), vec2(-4, 6), vec2(-4, 7), vec2(-3, -7),vec2(-3, -6),vec2(-3, -5),
    vec2(-3, -4),vec2(-3, -3),vec2(-3, -2),vec2(-3, -1),vec2(-3, 0), vec2(-3, 1), vec2(-3, 2),
    vec2(-3, 3), vec2(-3, 4), vec2(-3, 5), vec2(-3, 6), vec2(-3, 7), vec2(-2, -7),vec2(-2, -6),
    vec2(-2, -5),vec2(-2, -4),vec2(-2, -3),vec2(-2, -2),vec2(-2, -1),vec2(-2, 0), vec2(-2, 1),
    vec2(-2, 2), vec2(-2, 3), vec2(-2, 4), vec2(-2, 5), vec2(-2, 6), vec2(-2, 7), vec2(-1, -7),
    vec2(-1, -6),vec2(-1, -5),vec2(-1, -4),vec2(-1, -3),vec2(-1, -2),vec2(-1, 2), vec2(-1, 3),
    vec2(-1, 4), vec2(-1, 5), vec2(-1, 6), vec2(-1, 7), vec2(0, -7), vec2(0, -6), vec2(0, -5),
    vec2(0, -4), vec2(0, -3), vec2(0, -2), vec2(0, 2),  vec2(0, 3),  vec2(0, 4),  vec2(0, 5),
    vec2(0, 6),  vec2(0, 7),  vec2(1, -7), vec2(1, -6), vec2(1, -5), vec2(1, -4), vec2(1, -3),
    vec2(1, -2), vec2(1, 2),  vec2(1, 3),  vec2(1, 4),  vec2(1, 5),  vec2(1, 6),  vec2(1, 7),
    vec2(2, -7), vec2(2, -6), vec2(2, -5), vec2(2, -4), vec2(2, -3), vec2(2, -2), vec2(2, -1),
    vec2(2, 0),  vec2(2, 1),  vec2(2, 2),  vec2(2, 3),  vec2(2, 4),  vec2(2, 5),  vec2(2, 6),
    vec2(2, 7),  vec2(3, -7), vec2(3, -6), vec2(3, -5), vec2(3, -4), vec2(3, -3), vec2(3, -2),
    vec2(3, -1), vec2(3, 0),  vec2(3, 1),  vec2(3, 2),  vec2(3, 3),  vec2(3, 4),  vec2(3, 5),
    vec2(3, 6),  vec2(3, 7),  vec2(4, -7), vec2(4, -6), vec2(4, -5), vec2(4, -4), vec2(4, -3),
    vec2(4, -2), vec2(4, -1), vec2(4, 0),  vec2(4, 1),  vec2(4, 2),  vec2(4, 3),  vec2(4, 4),
    vec2(4, 5),  vec2(4, 6),  vec2(4, 7),  vec2(5, -7), vec2(5, -6), vec2(5, -5), vec2(5, -4),
    vec2(5, -3), vec2(5, -2), vec2(5, -1), vec2(5, 0),  vec2(5, 1),  vec2(5, 2),  vec2(5, 3),
    vec2(5, 4),  vec2(5, 5),  vec2(5, 6),  vec2(5, 7),  vec2(6, -7), vec2(6, -6), vec2(6, -5),
    vec2(6, -4), vec2(6, -3), vec2(6, -2), vec2(6, -1), vec2(6, 0),  vec2(6, 1),  vec2(6, 2),
    vec2(6, 3),  vec2(6, 4),  vec2(6, 5),  vec2(6, 6),  vec2(6, 7),  vec2(7, -7), vec2(7, -6),
    vec2(7, -5), vec2(7, -4), vec2(7, -3), vec2(7, -2), vec2(7, -1), vec2(7, 0),  vec2(7, 1),
    vec2(7, 2),  vec2(7, 3),  vec2(7, 4),  vec2(7, 5),  vec2(7, 6),  vec2(7, 7));

ivec2 wrap_idx(vec2 p, vec2 off) {
    vec2 border = pc.resolution;
    vec2 res = p + off;

    if (res.x < 0) {
        res.x = border.x + res.x;
    } else if (res.x > border.x) {
        res.x = res.x - border.x;
    }
    if (res.y < 0) {
        res.y = border.y + res.y;
    } else if (res.y > border.y) {
        res.y = res.y - border.y;
    }
    return ivec2(res);
}

struct ImageData {
    vec2 avg[216];
} imageData;

float conv(in float[9] kernel, in float[9] data, in float denom, in float offset) {
    float res = 0.0;
    for (int i = 0; i < 9; ++i) {
        res += kernel[i] * data[i];
    }
    return clamp(res / denom + offset, 0.0, 1.0);
}

float hash(float n) {
    return fract(sin(n) * 43758.5453);
}

float hash2(vec2 n) {
    return hash(dot(n, vec2(12.9898, 4.1414)));
}

void main() {
    if (gl_GlobalInvocationID.x >= pc.resolution.x ||
        gl_GlobalInvocationID.y >= pc.resolution.y) {
        return;
    }

    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    float cell = imageLoad(float_texture1, pos).r;

    float avg = 0;
    for (int i = 0; i < PATTERN_SIZE; ++i) {
        float x = imageLoad(float_texture1, wrap_idx(pos, PATTERN[i])).r;
        avg += x;
    }
    avg /= PATTERN_SIZE;

    float col = 0.0;
    if (pc.time < 1.0) {
        col += sin(pos.x / 8. - PI * 0.5) + cos(pos.y / 16. + PI);
        /* col = hash(pos.x * pos.y); */
    } else {
        if (cell < 0.0 && avg > -0.2)
            col = -cell + 0.025;
        else if (cell > 0. && avg < 0.)
            col = -cell - 0.025;
        else if (cell > 0. && avg > 0.55)
            col = -cell - 0.025;
        else if (cell < avg)
            col = cell + 0.01;
        else if (avg < cell)
            col = cell - 0.01;
    }
    col = clamp(col, -1, 1);

    imageStore(float_texture1, ivec2(gl_GlobalInvocationID.xy), vec4(col));
}
